import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters
from keep_alive import keep_alive
import os
import time
from datetime import datetime, timedelta
import asyncio

# –ü—Ä–æ—Å—Ç–∞—è —Ñ–∞–π–ª–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –∑–∞–º–µ–Ω–∞ replit db
import json

class SimpleDB:
    def __init__(self, filename='bot_data.json'):
        self.filename = filename
        self.data = self._load_data()

    def _load_data(self):
        try:
            with open(self.filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def _save_data(self):
        with open(self.filename, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)

    def __contains__(self, key):
        return key in self.data

    def __getitem__(self, key):
        return self.data[key]

    def __setitem__(self, key, value):
        self.data[key] = value
        self._save_data()

db = SimpleDB()

cards = [
    ("üü¢ –û–±—ã—á–Ω–∞—è: –ü—Ä–æ—Å—Ç–æ–π –ú–∞–Ω–≥–æ", 12),
    ("üü¢ –û–±—ã—á–Ω–∞—è: –î–µ–Ω—á–∏–∫", 12),
    ("üü¢ –û–±—ã—á–Ω–∞—è: –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –ì–æ—Ä—á–∏—Ü–∞", 12),
    ("üü¢ –û–±—ã—á–Ω–∞—è: Kanye West", 12),
    ("üîµ –ù–µ–æ–±—ã—á–Ω–∞—è: –ì–æ—Ä—á–∏—Ü–∞", 6),
    ("üîµ –ù–µ–æ–±—ã—á–Ω–∞—è: –¢—Ä–æ–ª–ª—Ñ–µ–π—Å", 6),
    ("üîµ –ù–µ–æ–±—ã—á–Ω–∞—è: –¢–∞–Ω—Ç—É–º –í–µ—Ä–¥–µ", 6),
    ("üîµ –ù–µ–æ–±—ã—á–Ω–∞—è: Sigeon Pex", 6),
    ("üü£ –≠–ø–∏—á–µ—Å–∫–∞—è: –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –ü—Å–∏—Ö–æ–ø–∞—Ç", 3.5),
    ("üü£ –≠–ø–∏—á–µ—Å–∫–∞—è: –ú–∏—Å—Ç–µ—Ä –ì—É–Ω", 3.5),
    ("üü£ –≠–ø–∏—á–µ—Å–∫–∞—è: –î–æ–∫—Ç–æ—Ä –ì—É–Ω", 3.5),
    ("üü£ –≠–ø–∏—á–µ—Å–∫–∞—è: –û—Ç–∫—Ä–æ–π –ë–∞–∑—É –∏ –í–µ—Ä–Ω–∏ –ú–Ω–µ –ë–† –ë–† –ü–∞—Ç–∞–ø–∏–º–∞", 3.5),
    ("üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è: –ú–∞–Ω–≥–æ –ú–∞—Ä–∫", 2),
    ("üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è: –ö–æ—Ä–æ–ª—å –ì–æ—Ä—á–∏—Ü—ã", 2),
    ("üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è: –ö–∏—Ç–∞–π—Å–∫–∏–π –í–æ–∂–¥—å", 2),
    ("üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è: J_–ú–∞–Ω–≥–æ", 2),
    ("üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –ú–∞–Ω–≥–æ –°–ø–æ–Ω—Å–æ—Ä", 0.25),
    ("üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –û–º–Ω–∏-–ú–∞–Ω–≥–æ", 0.25),
    ("üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –ú–∞–Ω–≥–æ –¢—Ä–æ–ª–ª—Ñ–µ–π—Å", 0.25),
    ("üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –ì–æ—Ä—á–∏—Ü–∞ –ú–∞—Ç–≤–µ—è", 0.25),
    ("‚ö´ –°–µ–∫—Ä–µ—Ç–Ω–∞—è: Kendrick Lamar", 0.25),
]

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∫–µ—Ä–∞
POKER_CARD = "‚≠ê –£–Ω–∏–∫–∞–ª—å–Ω–∞—è: –ú–∞—Å—Ç–µ—Ä –ü–æ–∫–µ—Ä–∞"
POKER_67_CARD = "‚≠ê –£–Ω–∏–∫–∞–ª—å–Ω–∞—è: 67"

# –†–µ–π—Ç–∏–Ω–≥–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤ –≤ –ø–æ–∫–µ—Ä–µ
rarity_scores = {
    "üü¢": 1,  # –û–±—ã—á–Ω–∞—è
    "üîµ": 2,  # –ù–µ–æ–±—ã—á–Ω–∞—è
    "üü£": 3,  # –≠–ø–∏—á–µ—Å–∫–∞—è
    "üü†": 4,  # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è
    "üî¥": 5,  # –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è
    "‚ö´": 10,  # –°–µ–∫—Ä–µ—Ç–Ω–∞—è
    "‚≠ê": 6,  # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è (–ø–æ–∫–µ—Ä–Ω–∞—è)
}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
active_games = {}
pending_challenges = {}
pending_trades = {}

def roll_card():
    roll = random.uniform(0, 100)
    total = 0
    for card, chance in cards:
        total += chance
        if roll <= total:
            return card
    return cards[0][0]

def roll_lucky_card():
    # –¢–æ–ª—å–∫–æ —ç–ø–∏—á–µ—Å–∫–∏–µ, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ, –º–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    lucky_cards = [
        # –≠–ø–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
        ("üü£ –≠–ø–∏—á–µ—Å–∫–∞—è: –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –ü—Å–∏—Ö–æ–ø–∞—Ç", 20),
        ("üü£ –≠–ø–∏—á–µ—Å–∫–∞—è: –ú–∏—Å—Ç–µ—Ä –ì—É–Ω", 20),
        ("üü£ –≠–ø–∏—á–µ—Å–∫–∞—è: –î–æ–∫—Ç–æ—Ä –ì—É–Ω", 20),
        ("üü£ –≠–ø–∏—á–µ—Å–∫–∞—è: –û—Ç–∫—Ä–æ–π –ë–∞–∑—É –∏ –í–µ—Ä–Ω–∏ –ú–Ω–µ –ë–† –ë–† –ü–∞—Ç–∞–ø–∏–º–∞", 20),
        # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã
        ("üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è: –ú–∞–Ω–≥–æ –ú–∞—Ä–∫", 8),
        ("üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è: –ö–æ—Ä–æ–ª—å –ì–æ—Ä—á–∏—Ü—ã", 8),
        ("üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è: –ö–∏—Ç–∞–π—Å–∫–∏–π –í–æ–∂–¥—å", 2),
        ("üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è: J_–ú–∞–Ω–≥–æ", 1),
        # –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
        ("üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –ú–∞–Ω–≥–æ –°–ø–æ–Ω—Å–æ—Ä", 0.25),
        ("üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –û–º–Ω–∏-–ú–∞–Ω–≥–æ", 0.25),
        ("üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –ú–∞–Ω–≥–æ –¢—Ä–æ–ª–ª—Ñ–µ–π—Å", 0.25),
        ("üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –ì–æ—Ä—á–∏—Ü–∞ –ú–∞—Ç–≤–µ—è", 0.25),
        # –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
        ("‚ö´ –°–µ–∫—Ä–µ—Ç–Ω–∞—è: Kendrick Lamar", 0.5),
    ]

    roll = random.uniform(0, 100)
    total = 0
    for card, chance in lucky_cards:
        total += chance
        if roll <= total:
            return card
    return lucky_cards[0][0]

def roll_poker_card():
    # –î–ª—è –ø–æ–∫–µ—Ä–∞ –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–º–µ—é—Ç —Ä–∞–≤–Ω—ã–µ —à–∞–Ω—Å—ã
    poker_cards = [card[0] for card in cards] + [POKER_CARD, POKER_67_CARD]
    return random.choice(poker_cards)

def add_card_to_inventory(user_id, card):
    user_key = f"user_{user_id}"
    if user_key in db:
        inventory = db[user_key]
    else:
        inventory = {}

    if card in inventory:
        inventory[card] += 1
    else:
        inventory[card] = 1

    db[user_key] = inventory

def remove_card_from_inventory(user_id, card, amount=1):
    user_key = f"user_{user_id}"
    if user_key in db:
        inventory = db[user_key]
        if card in inventory and inventory[card] >= amount:
            inventory[card] -= amount
            if inventory[card] == 0:
                del inventory[card]
            db[user_key] = inventory
            return True
    return False

def get_user_inventory(user_id):
    user_key = f"user_{user_id}"
    if user_key in db:
        return db[user_key]
    return {}

def get_last_lucky_time(user_id):
    lucky_key = f"lucky_{user_id}"
    if lucky_key in db:
        return db[lucky_key]
    return 0

def set_last_lucky_time(user_id, timestamp):
    lucky_key = f"lucky_{user_id}"
    db[lucky_key] = timestamp

def get_last_card_time(user_id):
    card_key = f"card_{user_id}"
    if card_key in db:
        return db[card_key]
    return 0

def set_last_card_time(user_id, timestamp):
    card_key = f"card_{user_id}"
    db[card_key] = timestamp

def get_last_poker_time(user_id):
    poker_key = f"poker_{user_id}"
    if poker_key in db:
        return db[poker_key]
    return 0

def set_last_poker_time(user_id, timestamp):
    poker_key = f"poker_{user_id}"
    db[poker_key] = timestamp

def get_poker_wins(user_id):
    wins_key = f"poker_wins_{user_id}"
    if wins_key in db:
        return db[wins_key]
    return 0

def add_poker_win(user_id):
    wins_key = f"poker_wins_{user_id}"
    current_wins = get_poker_wins(user_id)
    db[wins_key] = current_wins + 1

def get_user_coins(user_id):
    coins_key = f"coins_{user_id}"
    if coins_key in db:
        return db[coins_key]
    return 0

def get_user_slots(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)"""
    slots_key = f"slots_{user_id}"
    if slots_key in db:
        return db[slots_key]
    return 2

def add_user_slot(user_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç 1 —Å–ª–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    slots_key = f"slots_{user_id}"
    current_slots = get_user_slots(user_id)
    db[slots_key] = current_slots + 1

def add_coins(user_id, amount):
    coins_key = f"coins_{user_id}"
    current_coins = get_user_coins(user_id)
    db[coins_key] = current_coins + amount

def remove_coins(user_id, amount):
    coins_key = f"coins_{user_id}"
    current_coins = get_user_coins(user_id)
    if current_coins >= amount:
        db[coins_key] = current_coins - amount
        return True
    return False

def get_last_mine_time(user_id):
    mine_key = f"mine_{user_id}"
    if mine_key in db:
        return db[mine_key]
    return 0

def set_last_mine_time(user_id, timestamp):
    mine_key = f"mine_{user_id}"
    db[mine_key] = timestamp

def get_lucky_uses(user_id):
    lucky_uses_key = f"lucky_uses_{user_id}"
    if lucky_uses_key in db:
        return db[lucky_uses_key]
    return 0

def set_lucky_uses(user_id, uses):
    lucky_uses_key = f"lucky_uses_{user_id}"
    db[lucky_uses_key] = uses

def get_daily_shop():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω"""
    today = datetime.now().strftime("%Y-%m-%d")
    shop_key = f"shop_{today}"

    if shop_key in db:
        return db[shop_key]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
    shop_items = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏ (—á–µ–º —Ä–µ–∂–µ –∫–∞—Ä—Ç–∞, —Ç–µ–º –º–µ–Ω—å—à–µ —à–∞–Ω—Å)
    for card, base_chance in cards:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å—ã –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ –≤ 3 —Ä–∞–∑–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å /card
        shop_chance = base_chance * 3
        if random.random() * 100 <= shop_chance:
            # –¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
            if card.startswith("üü¢"):  # –û–±—ã—á–Ω–∞—è
                price = random.randint(50, 100)
            elif card.startswith("üîµ"):  # –ù–µ–æ–±—ã—á–Ω–∞—è
                price = random.randint(150, 250)
            elif card.startswith("üü£"):  # –≠–ø–∏—á–µ—Å–∫–∞—è
                price = random.randint(400, 600)
            elif card.startswith("üü†"):  # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è
                price = random.randint(800, 1200)
            elif card.startswith("üî¥"):  # –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è
                price = random.randint(2000, 3000)
            elif card.startswith("‚ö´"):  # –°–µ–∫—Ä–µ—Ç–Ω–∞—è
                price = random.randint(5000, 7000)
            else:
                price = 100

            shop_items.append({
                "card": card,
                "price": price
            })

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ 29 (—á—Ç–æ–±—ã —Å Lucky Card –±—ã–ª–æ –º–∞–∫—Å–∏–º—É–º 30)
    if len(shop_items) > 29:
        shop_items = random.sample(shop_items, 29)

    # –î–æ–±–∞–≤–ª—è–µ–º Lucky Cards (1, 2 –∏–ª–∏ 3 —à—Ç—É–∫–∏)
    lucky_count = random.choice([1, 2, 3])
    lucky_price_per_use = 300
    shop_items.append({
        "card": f"üçÄ Lucky Card √ó {lucky_count}",
        "price": lucky_price_per_use * lucky_count,
        "special": "lucky",
        "count": lucky_count
    })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–≥–∞–∑–∏–Ω –Ω–∞ –¥–µ–Ω—å
    db[shop_key] = shop_items
    return shop_items

def get_user_purchases_today(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.now().strftime("%Y-%m-%d")
    purchases_key = f"purchases_{user_id}_{today}"
    if purchases_key in db:
        return db[purchases_key]
    return []

def add_user_purchase_today(user_id, item):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–∫—É–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.now().strftime("%Y-%m-%d")
    purchases_key = f"purchases_{user_id}_{today}"
    purchases = get_user_purchases_today(user_id)
    purchases.append(item)
    db[purchases_key] = purchases

def get_market_cards():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
    if "market_cards" in db:
        return db["market_cards"]
    return []

def add_card_to_market(card, price, seller_id, seller_name):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞ —Ä—ã–Ω–æ–∫"""
    market_cards = get_market_cards()
    market_cards.append({
        "card": card,
        "price": price,
        "seller_id": seller_id,
        "seller_name": seller_name,
        "timestamp": time.time(),
        "type": "market"
    })
    db["market_cards"] = market_cards

def remove_card_from_market(index):
    """–£–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç—É —Å —Ä—ã–Ω–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    market_cards = get_market_cards()
    if 0 <= index < len(market_cards):
        removed_card = market_cards.pop(index)
        db["market_cards"] = market_cards
        return removed_card
    return None

def cleanup_expired_market_cards():
    """–£–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–∞–º"""
    market_cards = get_market_cards()
    current_time = time.time()
    expired_cards = []
    active_cards = []
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ
    for card_data in market_cards:
        if current_time - card_data['timestamp'] > 24 * 60 * 60:  # 24 —á–∞—Å–∞
            expired_cards.append(card_data)
        else:
            active_cards.append(card_data)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    for card_data in expired_cards:
        add_card_to_inventory(card_data['seller_id'], card_data['card'])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
    if len(expired_cards) > 0:
        db["market_cards"] = active_cards
    
    return len(expired_cards)

def get_best_non_unique_card(user_id):
    """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à—É—é –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞ (–∏—Å–∫–ª—é—á–∞—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)"""
    inventory = get_user_inventory(user_id)
    if not inventory:
        return None

    # –ò—Å–∫–ª—é—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã (—Ç–µ —á—Ç–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å ‚≠ê)
    non_unique_cards = {card: count for card, count in inventory.items() 
                       if not card.startswith("‚≠ê") and count > 0}

    if not non_unique_cards:
        return None

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω–Ω–æ—Å—Ç–∏)
    rarity_order = {"üî¥": 5, "üü†": 4, "üü£": 3, "üîµ": 2, "üü¢": 1}

    best_card = None
    best_rarity = 0

    for card in non_unique_cards:
        card_rarity = rarity_order.get(card[0], 0)
        if card_rarity > best_rarity:
            best_rarity = card_rarity
            best_card = card

    return best_card

def calculate_poker_score(hand):
    rarity_counts = {}
    for card in hand:
        rarity = card[0]  # –ü–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª - —ç–º–æ–¥–∑–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏
        rarity_counts[rarity] = rarity_counts.get(rarity, 0) + 1

    total_score = 0
    for rarity, count in rarity_counts.items():
        score = rarity_scores.get(rarity, 0)
        total_score += score * count

    return total_score, rarity_counts

def format_time_remaining(seconds):
    if seconds <= 0:
        return "0 —Å–µ–∫—É–Ω–¥"

    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)

    parts = []
    if hours > 0:
        parts.append(f"{hours} —á")
    if minutes > 0:
        parts.append(f"{minutes} –º–∏–Ω")
    if secs > 0:
        parts.append(f"{secs} —Å–µ–∫")

    return " ".join(parts)

async def get_user_display_name(context, chat_id, user_id):
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        user = chat_member.user

        if user.username:
            return f"@{user.username}"
        elif user.first_name and user.last_name:
            return f"{user.first_name} {user.last_name}"
        elif user.first_name:
            return user.first_name
        else:
            return f"ID: {user_id}"
    except:
        return f"ID: {user_id}"

async def get_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    current_time = time.time()
    last_card_time = get_last_card_time(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 60 —Å–µ–∫—É–Ω–¥
    cooldown_time = 60  # 60 —Å–µ–∫—É–Ω–¥
    time_passed = current_time - last_card_time

    if time_passed < cooldown_time:
        time_remaining = cooldown_time - time_passed
        formatted_time = format_time_remaining(time_remaining)
        await update.message.reply_text(
            f"‚è∞ –ö–æ–º–∞–Ω–¥—É /card –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑: {formatted_time}"
        )
        return

    card = roll_card()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    add_card_to_inventory(user_id, card)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    set_last_card_time(user_id, current_time)

    await update.message.reply_text(f"üéâ –¢—ã –≤—ã–±–∏–ª: {card}")

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞–∑–∞—Ç—å
    if update.message.reply_to_message:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_id = update.message.reply_to_message.from_user.id
        target_user_name = await get_user_display_name(context, update.effective_chat.id, target_user_id)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        target_user_id = update.effective_user.id
        target_user_name = await get_user_display_name(context, update.effective_chat.id, target_user_id)

    inventory = get_user_inventory(target_user_id)
    poker_wins = get_poker_wins(target_user_id)
    coins = get_user_coins(target_user_id)

    if not inventory:
        profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {target_user_name}\n\n"
        profile_text += "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: –ü—É—Å—Ç\n"
        profile_text += "üìä –í—Å–µ–≥–æ –∫–∞—Ä—Ç: 0\n"
        profile_text += f"ü™ô –ú–æ–Ω–µ—Ç—ã: {coins}\n"
        profile_text += f"üÉè –ü–æ–±–µ–¥ –≤ –ø–æ–∫–µ—Ä–µ: {poker_wins}\n\n"
        
        if target_user_id == update.effective_user.id:
            profile_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π /card —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏!"

        await update.message.reply_text(profile_text)
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (–ø–æ –ø–æ—Ä—è–¥–∫—É –≤ —Å–ø–∏—Å–∫–µ cards)
    card_order = {card[0]: i for i, card in enumerate(cards)}
    card_order[POKER_CARD] = -1  # –ü–æ–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ
    card_order[POKER_67_CARD] = -2  # –í—Ç–æ—Ä–∞—è –ø–æ–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞
    sorted_inventory = sorted(inventory.items(), key=lambda x: card_order.get(x[0], 999))

    total_cards = sum(inventory.values())

    profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {target_user_name}\n\n"
    profile_text += "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"

    for card, count in sorted_inventory:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        escaped_card = card.replace('_', '\\_').replace('-', '\\-')
        profile_text += f"{escaped_card} √ó {count}\n"

    profile_text += f"\nüìä –í—Å–µ–≥–æ –∫–∞—Ä—Ç: {total_cards}\n"
    profile_text += f"ü™ô –ú–æ–Ω–µ—Ç—ã: {coins}\n"
    profile_text += f"üÉè –ü–æ–±–µ–¥ –≤ –ø–æ–∫–µ—Ä–µ: {poker_wins}"

    await update.message.reply_text(profile_text)

async def lucky_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    current_time = time.time()
    last_lucky_time = get_last_lucky_time(user_id)
    lucky_uses = get_lucky_uses(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if lucky_uses > 0:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É–ø–ª–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        card = roll_lucky_card()
        add_card_to_inventory(user_id, card)
        set_lucky_uses(user_id, lucky_uses - 1)

        remaining_uses = lucky_uses - 1
        uses_text = f"\nüé´ –û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {remaining_uses}" if remaining_uses > 0 else "\n‚è∞ –°–ª–µ–¥—É—é—â–∏–π Lucky Card –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!"

        await update.message.reply_text(
            f"üçÄ LUCKY CARD! üçÄ\n\n"
            f"‚ú® –¢—ã –≤—ã–±–∏–ª: {card}{uses_text}",
            parse_mode='Markdown'
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω (2 —á–∞—Å–∞)
    cooldown_time = 2 * 60 * 60  # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    time_passed = current_time - last_lucky_time

    if time_passed < cooldown_time:
        time_remaining = cooldown_time - time_passed
        formatted_time = format_time_remaining(time_remaining)
        await update.message.reply_text(
            f"‚è∞ Lucky Card –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n"
            f"–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑: {formatted_time}\n\n"
            f"üí° –ö—É–ø–∏ Lucky Card –≤ –º–∞–≥–∞–∑–∏–Ω–µ (/shop) —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ –∫—É–ª–¥–∞—É–Ω–∞!"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º lucky –∫–∞—Ä—Ç–æ—á–∫—É
    card = roll_lucky_card()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    add_card_to_inventory(user_id, card)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    set_last_lucky_time(user_id, current_time)

    await update.message.reply_text(
        f"üçÄ LUCKY CARD! üçÄ\n\n"
        f"‚ú® –¢—ã –≤—ã–±–∏–ª: {card}\n\n"
        f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π Lucky Card –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!",
        parse_mode='Markdown'
    )

async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
    users_stats = []

    for key, value in db.data.items():
        if key.startswith("user_") and isinstance(value, dict):
            user_id = int(key.replace("user_", ""))
            total_cards = sum(value.values())

            display_name = await get_user_display_name(context, update.effective_chat.id, user_id)
            users_stats.append((display_name, total_cards, user_id))

    if not users_stats:
        await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–æ–±–∏—Ä–∞–ª –∫–∞—Ä—Ç–æ—á–∫–∏!")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    users_stats.sort(key=lambda x: x[1], reverse=True)

    # –ë–µ—Ä–µ–º —Ç–æ–ø-10
    top_users = users_stats[:10]

    top_text = "üèÜ –¢–û–ü-10 –ö–û–õ–õ–ï–ö–¶–ò–û–ù–ï–†–û–í –ö–ê–†–¢–û–ß–ï–ö üèÜ\n\n"

    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]

    for i, (display_name, total_cards, user_id) in enumerate(top_users):
        medal = medals[i] if i < len(medals) else f"{i+1}."
        top_text += f"{medal} {display_name} ‚Äî {total_cards} –∫–∞—Ä—Ç\n"

    await update.message.reply_text(top_text, parse_mode='Markdown')

async def poker_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    challenger_id = update.effective_user.id
    current_time = time.time()
    last_poker_time = get_last_poker_time(challenger_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω 15 –º–∏–Ω—É—Ç (900 —Å–µ–∫—É–Ω–¥)
    cooldown_time = 15 * 60  # 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    time_passed = current_time - last_poker_time

    if time_passed < cooldown_time:
        time_remaining = cooldown_time - time_passed
        formatted_time = format_time_remaining(time_remaining)
        await update.message.reply_text(
            f"‚è∞ –ü–æ–∫–µ—Ä –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑: {formatted_time}"
        )
        return

    challenger_name = await get_user_display_name(context, update.effective_chat.id, challenger_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    opponent_id = None
    opponent_name = None

    if update.message.reply_to_message:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        opponent_id = update.message.reply_to_message.from_user.id
        opponent_name = await get_user_display_name(context, update.effective_chat.id, opponent_id)
        print(f"DEBUG: Reply to message - opponent_id: {opponent_id}, opponent_name: {opponent_name}")
    elif context.args:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        target_username = context.args[0].replace('@', '')
        await update.message.reply_text(
            f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username}.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /poker"
        )
        return
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        await update.message.reply_text(
            "üÉè Mustard Poker\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /poker @username\n"
            "–ò–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /poker",
            parse_mode='Markdown'
        )
        return

    if opponent_id == challenger_id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–æ–≤ –∫–∞—Ä—Ç—ã
    challenger_inventory = get_user_inventory(challenger_id)
    opponent_inventory = get_user_inventory(opponent_id)

    if not challenger_inventory:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /card")
        return

    if not opponent_inventory:
        await update.message.reply_text(f"‚ùå –£ {opponent_name} –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã!")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∫–µ—Ä–∞
    set_last_poker_time(challenger_id, current_time)

    # –°–æ–∑–¥–∞–µ–º –≤—ã–∑–æ–≤
    challenge_id = f"{challenger_id}{opponent_id}{int(time.time())}"
    print(f"DEBUG: Creating challenge {challenge_id}")

    pending_challenges[challenge_id] = {
        'challenger_id': challenger_id,
        'opponent_id': opponent_id,
        'challenger_name': challenger_name,
        'opponent_name': opponent_name,
        'chat_id': update.effective_chat.id,
        'timestamp': time.time()
    }

    print(f"DEBUG: Stored challenge: {pending_challenges[challenge_id]}")

    await update.message.reply_text(
        f"üÉè Mustard Poker Challenge!\n\n"
        f"{challenger_name} –≤—ã–∑—ã–≤–∞–µ—Ç {opponent_name} –Ω–∞ –¥—É—ç–ª—å!\n\n"
        f"üí° {opponent_name}, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /accept —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤\n"
        f"üí° –ò–ª–∏ –∫–æ–º–∞–Ω–¥—É /decline —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å",
        parse_mode='Markdown'
    )

async def accept_poker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    challenge = None
    challenge_id = None

    for cid, c in pending_challenges.items():
        if c['opponent_id'] == user_id:
            challenge = c
            challenge_id = cid
            break

    if not challenge:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –ø–æ–∫–µ—Ä!")
        return

    print(f"DEBUG: Accepting challenge {challenge_id}")

    # –£–¥–∞–ª—è–µ–º –≤—ã–∑–æ–≤ –∏–∑ pending
    del pending_challenges[challenge_id]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    await start_poker_game_from_command(update, context, challenge)

async def decline_poker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    challenge = None
    challenge_id = None

    for cid, c in pending_challenges.items():
        if c['opponent_id'] == user_id:
            challenge = c
            challenge_id = cid
            break

    if not challenge:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –ø–æ–∫–µ—Ä!")
        return

    print(f"DEBUG: Declining challenge {challenge_id}")

    # –£–¥–∞–ª—è–µ–º –≤—ã–∑–æ–≤ –∏–∑ pending
    del pending_challenges[challenge_id]

    await update.message.reply_text(
        f"‚ùå {challenge['opponent_name']} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤ –æ—Ç {challenge['challenger_name']}"
    )

async def start_poker_game_from_command(update, context, game_data):
    print(f"DEBUG: Starting poker game from command")
    print(f"DEBUG: Game data: {game_data}")

    try:
        game = game_data

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏ –∏–≥—Ä–æ–∫–æ–≤
        challenger_inventory = get_user_inventory(game['challenger_id'])
        opponent_inventory = get_user_inventory(game['opponent_id'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä—É–∫–∏ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–≤—Å–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞)
        challenger_hand = []
        for card, count in challenger_inventory.items():
            challenger_hand.extend([card] * count)

        opponent_hand = []
        for card, count in opponent_inventory.items():
            opponent_hand.extend([card] * count)

        # –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –±–æ–ª—å—à–µ 10 –∫–∞—Ä—Ç, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 10
        if len(challenger_hand) > 10:
            challenger_hand = random.sample(challenger_hand, 10)

        if len(opponent_hand) > 10:
            opponent_hand = random.sample(opponent_hand, 10)

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏
        challenger_score, challenger_rarities = calculate_poker_score(challenger_hand)
        opponent_score, opponent_rarities = calculate_poker_score(opponent_hand)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if challenger_score > opponent_score:
            winner_id = game['challenger_id']
            winner_name = game['challenger_name']
            loser_id = game['opponent_id']
            loser_name = game['opponent_name']
            winner_hand = challenger_hand
            winner_score = challenger_score
            loser_hand = opponent_hand
            loser_score = opponent_score
        elif opponent_score > challenger_score:
            winner_id = game['opponent_id']
            winner_name = game['opponent_name']
            loser_id = game['challenger_id']
            loser_name = game['challenger_name']
            winner_hand = opponent_hand
            winner_score = opponent_score
            loser_hand = challenger_hand
            loser_score = opponent_score
        else:
            # –ù–∏—á—å—è
            result_text = f"ü§ù –ù–ò–ß–¨–Ø!\n\n"
            result_text += f"üé≤ {game['challenger_name']}: {challenger_score} –æ—á–∫–æ–≤\n"
            result_text += f"üé≤ {game['opponent_name']}: {opponent_score} –æ—á–∫–æ–≤\n\n"
            result_text += "–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É!"

            await update.message.reply_text(result_text)
            return

        # –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é - —Å–ª—É—á–∞–π–Ω–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–∫–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
        unique_rewards = [POKER_CARD, POKER_67_CARD]

        # 5% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç—É Kendrick Lamar
        if random.random() < 0.05:
            reward_card = "‚ö´ –°–µ–∫—Ä–µ—Ç–Ω–∞—è: Kendrick Lamar"
        else:
            reward_card = random.choice(unique_rewards)

        add_card_to_inventory(winner_id, reward_card)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        add_poker_win(winner_id)

        # –û—Ç–Ω–∏–º–∞–µ–º –ª—É—á—à—É—é –∫–∞—Ä—Ç—É —É –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (–∫—Ä–æ–º–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)
        lost_card = get_best_non_unique_card(loser_id)
        lost_card_text = ""
        if lost_card:
            if remove_card_from_inventory(loser_id, lost_card, 1):
                lost_card_text = f"\nüíî {loser_name} —Ç–µ—Ä—è–µ—Ç: {lost_card}"

# –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"üÉè –†–ï–ó–£–õ–¨–¢–ê–¢–´ MUSTARD POKER\n\n"
        result_text += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n"
        result_text += f"üíî –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: {loser_name}\n\n"
        result_text += f"üé≤ –û—á–∫–∏:\n"
        result_text += f"‚Ä¢ {winner_name}: {winner_score}\n"
        result_text += f"‚Ä¢ {loser_name}: {loser_score}\n\n"
        result_text += f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward_card}{lost_card_text}\n\n"

        result_text += f"üÉè –†—É–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ({winner_name}):\n"
        for card in winner_hand:
            result_text += f"‚Ä¢ {card}\n"

        await update.message.reply_text(result_text)
        print(f"DEBUG: Game completed successfully")

    except Exception as e:
        print(f"ERROR in start_poker_game_from_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã.")

async def poker_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ–±–µ–¥–∞–º–∏ –≤ –ø–æ–∫–µ—Ä–µ
    poker_stats = []

    for key, value in db.data.items():
        if key.startswith("poker_wins_") and isinstance(value, int) and value > 0:
            user_id = int(key.replace("poker_wins_", ""))
            wins = value

            display_name = await get_user_display_name(context, update.effective_chat.id, user_id)
            poker_stats.append((display_name, wins, user_id))

    if not poker_stats:
        await update.message.reply_text("üÉè –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª –≤ Mustard Poker!")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    poker_stats.sort(key=lambda x: x[1], reverse=True)

    # –ë–µ—Ä–µ–º —Ç–æ–ø-10
    top_players = poker_stats[:10]

    leaderboard_text = "üÉè –†–ï–ô–¢–ò–ù–ì MUSTARD POKER üÉè\n\n"

    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]

    for i, (display_name, wins, user_id) in enumerate(top_players):
        medal = medals[i] if i < len(medals) else f"{i+1}."
        leaderboard_text += f"{medal} {display_name} - {wins} –ø–æ–±–µ–¥\n"

    await update.message.reply_text(leaderboard_text)

async def show_cardlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cardlist_text = "üÉè –°–ü–ò–°–û–ö –í–°–ï–• –ö–ê–†–¢ –í –ò–ì–†–ï üÉè\n\n"

    cardlist_text += "üü¢ –û–ë–´–ß–ù–´–ï –ö–ê–†–¢–´ (12% –∫–∞–∂–¥–∞—è):\n"
    cardlist_text += "‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –ú–∞–Ω–≥–æ\n"
    cardlist_text += "‚Ä¢ –î–µ–Ω—á–∏–∫\n"
    cardlist_text += "‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –ì–æ—Ä—á–∏—Ü–∞\n"
    cardlist_text += "‚Ä¢ Kanye West\n\n"

    cardlist_text += "üîµ –ù–ï–û–ë–´–ß–ù–´–ï –ö–ê–†–¢–´ (6% –∫–∞–∂–¥–∞—è):\n"
    cardlist_text += "‚Ä¢ –ì–æ—Ä—á–∏—Ü–∞\n"
    cardlist_text += "‚Ä¢ –¢—Ä–æ–ª–ª—Ñ–µ–π—Å\n"
    cardlist_text += "‚Ä¢ –¢–∞–Ω—Ç—É–º –í–µ—Ä–¥–µ\n"
    cardlist_text += "‚Ä¢ Sigeon Pex\n\n"

    cardlist_text += "üü£ –≠–ü–ò–ß–ï–°–ö–ò–ï –ö–ê–†–¢–´ (3\\.5% –∫–∞–∂–¥–∞—è):\n"
    cardlist_text += "‚Ä¢ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –ü—Å–∏—Ö–æ–ø–∞—Ç\n"
    cardlist_text += "‚Ä¢ –ú–∏—Å—Ç–µ—Ä –ì—É–Ω\n"
    cardlist_text += "‚Ä¢ –î–æ–∫—Ç–æ—Ä –ì—É–Ω\n"
    cardlist_text += "‚Ä¢ –û—Ç–∫—Ä–æ–π –ë–∞–∑—É –∏ –í–µ—Ä–Ω–∏ –ú–Ω–µ –ë–† –ë–† –ü–∞—Ç–∞–ø–∏–º–∞\n\n"

    cardlist_text += "üü† –õ–ï–ì–ï–ù–î–ê–†–ù–´–ï –ö–ê–†–¢–´ (2% –∫–∞–∂–¥–∞—è):\n"
    cardlist_text += "‚Ä¢ –ú–∞–Ω–≥–æ –ú–∞—Ä–∫\n"
    cardlist_text += "‚Ä¢ –ö–æ—Ä–æ–ª—å –ì–æ—Ä—á–∏—Ü—ã\n"
    cardlist_text += "‚Ä¢ –ö–∏—Ç–∞–π—Å–∫–∏–π –í–æ–∂–¥—å\n"
    cardlist_text += "‚Ä¢ J\\_–ú–∞–Ω–≥–æ\n\n"

    cardlist_text += "üî¥ –ú–ò–§–ò–ß–ï–°–ö–ò–ï –ö–ê–†–¢–´ (0\\.25% –∫–∞–∂–¥–∞—è):\n"
    cardlist_text += "‚Ä¢ –ú–∞–Ω–≥–æ –°–ø–æ–Ω—Å–æ—Ä\n"
    cardlist_text += "‚Ä¢ –û–º–Ω–∏-–ú–∞–Ω–≥–æ\n"
    cardlist_text += "‚Ä¢ –ú–∞–Ω–≥–æ –¢—Ä–æ–ª–ª—Ñ–µ–π—Å\n"
    cardlist_text += "‚Ä¢ –ì–æ—Ä—á–∏—Ü–∞ –ú–∞—Ç–≤–µ—è\n\n"

    cardlist_text += "‚ö´ –°–ï–ö–†–ï–¢–ù–ê–Ø –ö–ê–†–¢–ê:\n"
    cardlist_text += "‚Ä¢ Kendrick Lamar\n\n"

    cardlist_text += "‚≠ê –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ö–ê–†–¢–´:\n"
    cardlist_text += "‚Ä¢ –ú–∞—Å—Ç–µ—Ä –ü–æ–∫–µ—Ä–∞\n"
    cardlist_text += "‚Ä¢ 67\n\n"

    cardlist_text += "üí° –í—Å–µ–≥–æ –∫–∞—Ä—Ç: 21 –æ–±—ã—á–Ω–∞—è \\+ 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö \\+ 1 —Å–µ–∫—Ä–µ—Ç–Ω–∞—è"

    await update.message.reply_text(cardlist_text, parse_mode='Markdown')

async def give_sponsor_mango(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º–µ–Ω–Ω–æ @PigeonGoonMaster
    user = update.effective_user
    if not user.username or user.username.lower() != "pigeongoonmaster":
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @PigeonGoonMaster!")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã
    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id
        target_name = await get_user_display_name(context, update.effective_chat.id, target_user_id)
    else:
        target_user_id = user.id
        target_name = f"@{user.username}"

    card = "üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –ú–∞–Ω–≥–æ –°–ø–æ–Ω—Å–æ—Ä"
    add_card_to_inventory(target_user_id, card)
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ {card} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name}")

async def give_omni_mango(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º–µ–Ω–Ω–æ @PigeonGoonMaster
    user = update.effective_user
    if not user.username or user.username.lower() != "pigeongoonmaster":
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @PigeonGoonMaster!")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã
    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id
        target_name = await get_user_display_name(context, update.effective_chat.id, target_user_id)
    else:
        target_user_id = user.id
        target_name = f"@{user.username}"

    card = "üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –û–º–Ω–∏-–ú–∞–Ω–≥–æ"
    add_card_to_inventory(target_user_id, card)
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ {card} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name}")

async def give_troll_mango(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º–µ–Ω–Ω–æ @PigeonGoonMaster
    user = update.effective_user
    if not user.username or user.username.lower() != "pigeongoonmaster":
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @PigeonGoonMaster!")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã
    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id
        target_name = await get_user_display_name(context, update.effective_chat.id, target_user_id)
    else:
        target_user_id = user.id
        target_name = f"@{user.username}"

    card = "üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –ú–∞–Ω–≥–æ –¢—Ä–æ–ª–ª—Ñ–µ–π—Å"
    add_card_to_inventory(target_user_id, card)
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ {card} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name}")

async def give_matvey_mustard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º–µ–Ω–Ω–æ @PigeonGoonMaster
    user = update.effective_user
    if not user.username or user.username.lower() != "pigeongoonmaster":
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @PigeonGoonMaster!")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã
    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id
        target_name = await get_user_display_name(context, update.effective_chat.id, target_user_id)
    else:
        target_user_id = user.id
        target_name = f"@{user.username}"

    card = "üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –ì–æ—Ä—á–∏—Ü–∞ –ú–∞—Ç–≤–µ—è"
    add_card_to_inventory(target_user_id, card)
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ {card} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name}")

async def give_kendrick_lamar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º–µ–Ω–Ω–æ @PigeonGoonMaster
    user = update.effective_user
    if not user.username or user.username.lower() != "pigeongoonmaster":
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @PigeonGoonMaster!")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã
    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id
        target_name = await get_user_display_name(context, update.effective_chat.id, target_user_id)
    else:
        target_user_id = user.id
        target_name = f"@{user.username}"

    card = "‚ö´ –°–µ–∫—Ä–µ—Ç–Ω–∞—è: Kendrick Lamar"
    add_card_to_inventory(target_user_id, card)
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ {card} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name}")

async def give_any_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º–µ–Ω–Ω–æ @PigeonGoonMaster
    user = update.effective_user
    if not user.username or user.username.lower() != "pigeongoonmaster":
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @PigeonGoonMaster!")
        return

    if not context.args:
        all_cards_list = "\n".join([f"‚Ä¢ {card[0]}" for card in cards])
        await update.message.reply_text(
            "üéÅ –í—ã–¥–∞—á–∞ –ª—é–±–æ–π –∫–∞—Ä—Ç—ã\n\n"
            "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/giveanycard [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã]\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
            "/giveanycard 5 –ü—Ä–æ—Å—Ç–æ–π –ú–∞–Ω–≥–æ\n"
            "/giveanycard 1 –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π\n"
            "/giveanycard –¢—Ä–æ–ª–ª—Ñ–µ–π—Å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 1)\n\n"
            "üí° –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç—ã –µ–º—É\n\n"
            f"üÉè –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n{all_cards_list}\n‚Ä¢ {POKER_CARD}\n‚Ä¢ {POKER_67_CARD}"
        )
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = context.args
    quantity = 1
    card_search_parts = args

    # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - —á–∏—Å–ª–æ, —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if args[0].isdigit():
        quantity = int(args[0])
        if quantity <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
        if quantity > 100:
            await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100!")
            return
        card_search_parts = args[1:]

    if not card_search_parts:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã!")
        return

    card_search = " ".join(card_search_parts)
    
    # –ò—â–µ–º –∫–∞—Ä—Ç—É –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç
    found_card = None
    all_cards = [card[0] for card in cards] + [POKER_CARD, POKER_67_CARD]
    
    for card in all_cards:
        if card_search.lower() in card.lower():
            found_card = card
            break
    
    if not found_card:
        await update.message.reply_text(f"‚ùå –ö–∞—Ä—Ç–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è '{card_search}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã
    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id
        target_name = await get_user_display_name(context, update.effective_chat.id, target_user_id)
    else:
        target_user_id = user.id
        target_name = f"@{user.username}"

    # –í—ã–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    for _ in range(quantity):
        add_card_to_inventory(target_user_id, found_card)

    quantity_text = f" √ó {quantity}" if quantity > 1 else ""
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ {found_card}{quantity_text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name}")

async def give_money(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º–µ–Ω–Ω–æ @PigeonGoonMaster
    user = update.effective_user
    if not user.username or user.username.lower() != "pigeongoonmaster":
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @PigeonGoonMaster!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(context.args) < 1:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç! –ù–∞–ø—Ä–∏–º–µ—Ä: /givemoney 1000")
        return

    if not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    amount = int(context.args[0])
    if amount <= 0:
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    target_user_id = None
    target_name = None

    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id
        target_name = await get_user_display_name(context, update.effective_chat.id, target_user_id)
    else:
        # –í—ã–¥–∞–µ–º —Å–µ–±–µ
        target_user_id = user.id
        target_name = f"@{user.username}"

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
    add_coins(target_user_id, amount)

    await update.message.reply_text(
        f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name}\n"
        f"ü™ô –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {get_user_coins(target_user_id)} –º–æ–Ω–µ—Ç"
    )

async def trade_offer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    trader_id = update.effective_user.id
    trader_name = await get_user_display_name(context, update.effective_chat.id, trader_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if len(context.args) < 2:
        await update.message.reply_text(
            "üí∞ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–π–¥–æ–≤ –∫–∞—Ä—Ç\n\n"
            "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/trade [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [–∫–∞—Ä—Ç–∞_–¥–ª—è_–æ–±–º–µ–Ω–∞] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [–∂–µ–ª–∞–µ–º–∞—è_–∫–∞—Ä—Ç–∞]\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
            "/trade 2 –ü—Ä–æ—Å—Ç–æ–π –ú–∞–Ω–≥–æ 1 –ì–æ—Ä—á–∏—Ü–∞\n"
            "/trade 1 –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π 1 –ú–∏—Å—Ç–µ—Ä\n\n"
            "üí° –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 1\n"
            "üí° –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π"
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    opponent_id = None
    opponent_name = None

    if update.message.reply_to_message:
        opponent_id = update.message.reply_to_message.from_user.id
        opponent_name = await get_user_display_name(context, update.effective_chat.id, opponent_id)
    else:
        await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞!")
        return

    if opponent_id == trader_id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ä—Ç
    args = context.args

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–∏—Å–ª–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
    offer_quantity = 1
    want_quantity = 1
    offer_card_parts = []
    want_card_parts = []

    parsing_want_card = False

    i = 0
    while i < len(args):
        arg = args[i]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —á–∏—Å–ª–æ–º
        if arg.isdigit():
            quantity = int(arg)
            if quantity <= 0:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                return

            if not parsing_want_card:
                offer_quantity = quantity
            else:
                want_quantity = quantity
        else:
            # –ï—Å–ª–∏ –º—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ —á–∏—Å–ª–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
            if not parsing_want_card:
                offer_card_parts.append(arg)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —á–∏—Å–ª–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö (–¥–ª—è –∂–µ–ª–∞–µ–º–æ–π –∫–∞—Ä—Ç—ã)
                for j in range(i + 1, len(args)):
                    if args[j].isdigit():
                        parsing_want_card = True
                        break
                    if j == len(args) - 1:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
                        parsing_want_card = True
                        want_card_parts.append(args[j])
                        i = j  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
            else:
                want_card_parts.append(arg)

        i += 1

    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∂–µ–ª–∞–µ–º—É—é –∫–∞—Ä—Ç—É, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –∫–∞–∫ –∂–µ–ª–∞–µ–º—É—é
    if not want_card_parts and offer_card_parts:
        want_card_parts = [offer_card_parts.pop()]

    if not offer_card_parts or not want_card_parts:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç –¥–ª—è –æ–±–º–µ–Ω–∞!")
        return

    offer_card_input = " ".join(offer_card_parts)
    want_card_input = " ".join(want_card_parts)

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
    trader_inventory = get_user_inventory(trader_id)
    opponent_inventory = get_user_inventory(opponent_id)

    offer_card = None
    want_card = None

    # –ò—â–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞ —É —Ç—Ä–µ–π–¥–µ—Ä–∞
    for card in trader_inventory:
        if trader_inventory[card] >= offer_quantity and offer_card_input.lower() in card.lower():
            offer_card = card
            break

    # –ò—â–µ–º –∂–µ–ª–∞–µ–º—É—é –∫–∞—Ä—Ç—É —É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    for card in opponent_inventory:
        if opponent_inventory[card] >= want_quantity and want_card_input.lower() in card.lower():
            want_card = card
            break

    if not offer_card:
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç {offer_quantity} –∫–∞—Ä—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '{offer_card_input}'!")
        return

    if not want_card:
        await update.message.reply_text(f"‚ùå –£ {opponent_name} –Ω–µ—Ç {want_quantity} –∫–∞—Ä—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '{want_card_input}'!")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞
    trade_id = f"{trader_id}{opponent_id}{int(time.time())}"
    pending_trades[trade_id] = {
        'trader_id': trader_id,
        'opponent_id': opponent_id,
        'trader_name': trader_name,
        'opponent_name': opponent_name,
        'offer_card': offer_card,
        'want_card': want_card,
        'offer_quantity': offer_quantity,
        'want_quantity': want_quantity,
        'chat_id': update.effective_chat.id,
        'timestamp': time.time()
    }

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
    escaped_offer_card = offer_card.replace('_', '\\_').replace('-', '\\-').replace('(', '\\(').replace(')', '\\)')
    escaped_want_card = want_card.replace('_', '\\_').replace('-', '\\-').replace('(', '\\(').replace(')', '\\)')
    escaped_trader_name = trader_name.replace('_', '\\_').replace('-', '\\-').replace('(', '\\(').replace(')', '\\)')
    escaped_opponent_name = opponent_name.replace('_', '\\_').replace('-', '\\-').replace('(', '\\(').replace(')', '\\)')

    await update.message.reply_text(
        f"üí∞ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –¢–†–ï–ô–î–ê\n\n"
        f"üë§ {escaped_trader_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:\n"
        f"üì§ –û—Ç–¥–∞—Ç—å: {escaped_offer_card} √ó {offer_quantity}\n"
        f"üì• –ü–æ–ª—É—á–∏—Ç—å: {escaped_want_card} √ó {want_quantity}\n\n"
        f"üí° {escaped_opponent_name}, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /accepttrade —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å\n"
        f"üí° –ò–ª–∏ /declinetrade —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å",
        parse_mode='Markdown'
    )

async def accept_trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    trade = None
    trade_id = None

    for tid, t in pending_trades.items():
        if t['opponent_id'] == user_id:
            trade = t
            trade_id = tid
            break

    if not trade:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ç—Ä–µ–π–¥–∞!")
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ pending
    del pending_trades[trade_id]

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ç—Ä–µ–π–¥–∞–º–∏)
    offer_quantity = trade.get('offer_quantity', 1)
    want_quantity = trade.get('want_quantity', 1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –µ—â–µ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
    trader_inventory = get_user_inventory(trade['trader_id'])
    opponent_inventory = get_user_inventory(trade['opponent_id'])

    if trade['offer_card'] not in trader_inventory or trader_inventory[trade['offer_card']] < offer_quantity:
        await update.message.reply_text(f"‚ùå –£ {trade['trader_name']} –Ω–µ—Ç {offer_quantity} –∫–∞—Ä—Ç {trade['offer_card']}!")
        return

    if trade['want_card'] not in opponent_inventory or opponent_inventory[trade['want_card']] < want_quantity:
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç {want_quantity} –∫–∞—Ä—Ç {trade['want_card']}!")
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
    remove_card_from_inventory(trade['trader_id'], trade['offer_card'], offer_quantity)
    remove_card_from_inventory(trade['opponent_id'], trade['want_card'], want_quantity)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã
    for _ in range(want_quantity):
        add_card_to_inventory(trade['trader_id'], trade['want_card'])
    for _ in range(offer_quantity):
        add_card_to_inventory(trade['opponent_id'], trade['offer_card'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    offer_text = f"{trade['offer_card']}" + (f" √ó {offer_quantity}" if offer_quantity > 1 else "")
    want_text = f"{trade['want_card']}" + (f" √ó {want_quantity}" if want_quantity > 1 else "")

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
    escaped_trader_name = trade['trader_name'].replace('_', '\\_').replace('-', '\\-').replace('(', '\\(').replace(')', '\\)')
    escaped_opponent_name = trade['opponent_name'].replace('_', '\\_').replace('-', '\\-').replace('(', '\\(').replace(')', '\\)')
    escaped_want_text = want_text.replace('_', '\\_').replace('-', '\\-').replace('(', '\\(').replace(')', '\\)')
    escaped_offer_text = offer_text.replace('_', '\\_').replace('-', '\\-').replace('(', '\\(').replace(')', '\\)')

    await update.message.reply_text(
        f"‚úÖ –¢–†–ï–ô–î –ó–ê–í–ï–†–®–ï–ù!\n\n"
        f"üîÑ {escaped_trader_name} –ø–æ–ª—É—á–∞–µ—Ç: {escaped_want_text}\n"
        f"üîÑ {escaped_opponent_name} –ø–æ–ª—É—á–∞–µ—Ç: {escaped_offer_text}\n\n"
        f"üéâ –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!",
        parse_mode='Markdown'
    )

async def decline_trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    trade = None
    trade_id = None

    for tid, t in pending_trades.items():
        if t['opponent_id'] == user_id:
            trade = t
            trade_id = tid
            break

    if not trade:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ç—Ä–µ–π–¥–∞!")
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ pending
    del pending_trades[trade_id]

    await update.message.reply_text(
        f"‚ùå {trade['opponent_name']} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –æ—Ç {trade['trader_name']}"
    )

async def cancel_trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    trade = None
    trade_id = None

    for tid, t in pending_trades.items():
        if t['trader_id'] == user_id:
            trade = t
            trade_id = tid
            break

    if not trade:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ç—Ä–µ–π–¥–∞!")
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ pending
    del pending_trades[trade_id]

    await update.message.reply_text(
        f"‚ùå {trade['trader_name']} –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –¥–ª—è {trade['opponent_name']}"
    )

async def mine_coins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    current_time = time.time()
    last_mine_time = get_last_mine_time(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω 12 —á–∞—Å–æ–≤ (43200 —Å–µ–∫—É–Ω–¥)
    cooldown_time = 12 * 60 * 60  # 12 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    time_passed = current_time - last_mine_time

    if time_passed < cooldown_time:
        time_remaining = cooldown_time - time_passed
        formatted_time = format_time_remaining(time_remaining)
        await update.message.reply_text(
            f"‚è∞ –ú–∞–π–Ω–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑: {formatted_time}"
        )
        return

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–∞
    inventory = get_user_inventory(user_id)
    total_cards = sum(inventory.values()) if inventory else 0

    # –°–ª—É—á–∞–π–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç 50 –¥–æ 150 –º–æ–Ω–µ—Ç
    income = random.randint(50, 150)

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
    add_coins(user_id, income)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞
    set_last_mine_time(user_id, current_time)

    await update.message.reply_text(
        f"‚õè –ú–ê–ô–ù–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù! ‚õè\n\n"
        f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {income} –º–æ–Ω–µ—Ç\n"
        f"ü™ô –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {get_user_coins(user_id)}\n\n"
        f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –º–∞–π–Ω–∏–Ω–≥ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤!",
        parse_mode='Markdown'
    )

async def show_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_coins = get_user_coins(user_id)
    purchases_today = get_user_purchases_today(user_id)
    shop_items = get_daily_shop()
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å —Ä—ã–Ω–∫–∞
    expired_count = cleanup_expired_market_cards()
    
    market_cards = get_market_cards()

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
    now = datetime.now()
    tomorrow = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
    time_until_update = tomorrow - now
    hours = int(time_until_update.total_seconds() // 3600)
    minutes = int((time_until_update.total_seconds() % 3600) // 60)

    shop_text = f"üõí –ú–ê–ì–ê–ó–ò–ù –ò –†–´–ù–û–ö –ò–ì–†–û–ö–û–í üõí\n\n"
    shop_text += f"ü™ô –í–∞—à–∏ –º–æ–Ω–µ—Ç—ã: {user_coins}\n"
    shop_text += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑: {hours}—á {minutes}–º–∏–Ω\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
    shop_text += f"üìÖ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ú–ê–ì–ê–ó–ò–ù\n"
    shop_text += f"‚ö† –ö–∞–∂–¥—É—é –∫–∞—Ä—Ç—É –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å\n\n"

    for i, item in enumerate(shop_items, 1):
        if item.get("special") == "lucky":
            # Lucky Card
            if "lucky" in purchases_today:
                status = "‚ùå –ö—É–ø–ª–µ–Ω–æ"
            else:
                status = f"üí∞ {item['price']} –º–æ–Ω–µ—Ç"
            shop_text += f"{i}. {item['card']} - {status}\n"
        else:
            # –û–±—ã—á–Ω–∞—è –∫–∞—Ä—Ç–∞
            card_name = item['card'].split(': ', 1)[1] if ': ' in item['card'] else item['card']
            if card_name in purchases_today:
                status = "‚ùå –ö—É–ø–ª–µ–Ω–æ"
            else:
                status = f"üí∞ {item['price']} –º–æ–Ω–µ—Ç"

            shop_text += f"{i}. {item['card']} - {status}\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—ã–Ω–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    if market_cards:
        shop_text += f"\nüè™ –†–´–ù–û–ö –ò–ì–†–û–ö–û–í\n"
        shop_text += f"üí° –ö–∞—Ä—Ç—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n\n"

        for i, item in enumerate(market_cards, len(shop_items) + 1):
            seller_name = item['seller_name']
            shop_text += f"{i}. {item['card']} - üí∞ {item['price']} –º–æ–Ω–µ—Ç (–æ—Ç {seller_name})\n"
    else:
        shop_text += f"\nüè™ –†–´–ù–û–ö –ò–ì–†–û–ö–û–í\n"
        shop_text += f"üì≠ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç –∫–∞—Ä—Ç—ã\n"
        shop_text += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sell [—Ü–µ–Ω–∞] [–∫–∞—Ä—Ç–∞] —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É\n"

    shop_text += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy [–Ω–æ–º–µ—Ä] –¥–ª—è –ø–æ–∫—É–ø–∫–∏"

    await update.message.reply_text(shop_text)

async def buy_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy [–Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞]\n"
            "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω: /shop",
            parse_mode='Markdown'
        )
        return

    item_number = int(context.args[0])
    shop_items = get_daily_shop()
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å —Ä—ã–Ω–∫–∞
    cleanup_expired_market_cards()
    
    market_cards = get_market_cards()

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Ä—ã–Ω–∫–∞
    all_items = shop_items + market_cards

    if item_number < 1 or item_number > len(all_items):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /shop")
        return

    item = all_items[item_number - 1]
    user_coins = get_user_coins(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ç–æ–≤–∞—Ä –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ —Å —Ä—ã–Ω–∫–∞
    if item_number <= len(shop_items):
        # –¢–æ–≤–∞—Ä –∏–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        purchases_today = get_user_purchases_today(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–∏–ª –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
        if item.get("special") == "lucky":
            if "lucky" in purchases_today:
                await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ Lucky Card —Å–µ–≥–æ–¥–Ω—è!")
                return
        else:
            card_name = item['card'].split(': ', 1)[1] if ': ' in item['card'] else item['card']
            if card_name in purchases_today:
                await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É —Å–µ–≥–æ–¥–Ω—è!")
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥
        if user_coins < item['price']:
            needed = item['price'] - user_coins
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ –µ—â–µ: {needed}")
            return

        # –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–≤–∞—Ä
        remove_coins(user_id, item['price'])

        if item.get("special") == "lucky":
            # –ü–æ–∫—É–ø–∫–∞ Lucky Card
            current_uses = get_lucky_uses(user_id)
            set_lucky_uses(user_id, current_uses + item['count'])
            add_user_purchase_today(user_id, "lucky")

            await update.message.reply_text(
                f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n\n"
                f"üçÄ –í—ã –∫—É–ø–∏–ª–∏: {item['card']}\n"
                f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {item['price']} –º–æ–Ω–µ—Ç\n"
                f"ü™ô –û—Å—Ç–∞–ª–æ—Å—å: {get_user_coins(user_id)} –º–æ–Ω–µ—Ç\n\n"
                f"üé´ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {get_lucky_uses(user_id)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π Lucky Card!",
                parse_mode='Markdown'
            )
        else:
            # –ü–æ–∫—É–ø–∫–∞ –æ–±—ã—á–Ω–æ–π –∫–∞—Ä—Ç—ã
            add_card_to_inventory(user_id, item['card'])
            card_name = item['card'].split(': ', 1)[1] if ': ' in item['card'] else item['card']
            add_user_purchase_today(user_id, card_name)

            await update.message.reply_text(
                f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n\n"
                f"üÉè –í—ã –∫—É–ø–∏–ª–∏: {item['card']}\n"
                f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {item['price']} –º–æ–Ω–µ—Ç\n"
                f"ü™ô –û—Å—Ç–∞–ª–æ—Å—å: {get_user_coins(user_id)} –º–æ–Ω–µ—Ç",
                parse_mode='Markdown'
            )
    else:
        # –ü–æ–∫—É–ø–∫–∞ —Å —Ä—ã–Ω–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        market_index = item_number - len(shop_items) - 1
        seller_id = item['seller_id']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç –ª–∏ —Å–≤–æ—é –∂–µ –∫–∞—Ä—Ç—É
        if seller_id == user_id:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥
        if user_coins < item['price']:
            needed = item['price'] - user_coins
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ –µ—â–µ: {needed}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ –µ—â–µ –Ω–∞ —Ä—ã–Ω–∫–µ
        current_market = get_market_cards()
        if market_index >= len(current_market) or current_market[market_index]['timestamp'] != item['timestamp']:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–¥–∞–Ω–∞!")
            return

        # –ü–æ–∫—É–ø–∞–µ–º –∫–∞—Ä—Ç—É —Å —Ä—ã–Ω–∫–∞
        remove_coins(user_id, item['price'])
        add_coins(seller_id, item['price'])
        add_card_to_inventory(user_id, item['card'])
        remove_card_from_market(market_index)

        await update.message.reply_text(
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å —Ä—ã–Ω–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n\n"
            f"üÉè –í—ã –∫—É–ø–∏–ª–∏: {item['card']}\n"
            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {item['price']} –º–æ–Ω–µ—Ç\n"
            f"ü™ô –û—Å—Ç–∞–ª–æ—Å—å: {get_user_coins(user_id)} –º–æ–Ω–µ—Ç\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {item['seller_name']}",
            parse_mode='Markdown'
        )

async def sell_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = await get_user_display_name(context, update.effective_chat.id, user_id)

    if len(context.args) < 2:
        await update.message.reply_text(
            "üí∞ –ü—Ä–æ–¥–∞–∂–∞ –∫–∞—Ä—Ç –Ω–∞ —Ä—ã–Ω–∫–µ\n\n"
            "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/sell [—Ü–µ–Ω–∞] [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã]\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
            "/sell 100 –ü—Ä–æ—Å—Ç–æ–π –ú–∞–Ω–≥–æ\n"
            "/sell 500 –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π\n\n"
            "üí° –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö –∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã\n"
            "‚ö† –õ–∏–º–∏—Ç: 2 —Å–ª–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±–æ–ª—å—à–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞ ‚≠ê Stars",
            parse_mode='Markdown'
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    user_slots = get_user_slots(user_id)
    market_cards = get_market_cards()
    user_cards_on_sale = [card for card in market_cards if card['seller_id'] == user_id]
    
    if len(user_cards_on_sale) >= user_slots:
        await update.message.reply_text(
            f"‚ùå –í—ã —É–∂–µ –ø—Ä–æ–¥–∞–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç ({user_slots})!\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mysales —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsell [–Ω–æ–º–µ—Ä] —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –∫–∞—Ä—Ç—É —Å –ø—Ä–æ–¥–∞–∂–∏\n"
            "‚≠ê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buyslot —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç –∑–∞ 10 Telegram Stars"
        )
        return

    if not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    price = int(context.args[0])
    if price <= 0:
        await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
        return

    card_search = " ".join(context.args[1:])
    user_inventory = get_user_inventory(user_id)

    if not user_inventory:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!")
        return

    # –ò—â–µ–º –∫–∞—Ä—Ç—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    found_card = None
    for card in user_inventory:
        if card_search.lower() in card.lower() and user_inventory[card] > 0:
            found_card = card
            break

    if not found_card:
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—â–µ–π '{card_search}'!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
    if found_card.startswith("‚≠ê"):
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã!")
        return

    # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    if not remove_card_from_inventory(user_id, found_card, 1):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Ä—ã–Ω–æ–∫
    add_card_to_market(found_card, price, user_id, user_name)

    user_slots = get_user_slots(user_id)
    remaining_slots = user_slots - len(user_cards_on_sale) - 1  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –∫–∞—Ä—Ç—É

    await update.message.reply_text(
        f"‚úÖ –ö–∞—Ä—Ç–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!\n\n"
        f"üÉè –ö–∞—Ä—Ç–∞: {found_card}\n"
        f"üí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\n"
        f"üõí –î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å –µ—ë –≤ –º–∞–≥–∞–∑–∏–Ω–µ (/shop)\n\n"
        f"üí° –ö–æ–≥–¥–∞ –∫–∞—Ä—Ç—É –∫—É–ø—è—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –º–æ–Ω–µ—Ç—ã\n"
        f"‚è∞ –ï—Å–ª–∏ –∫–∞—Ä—Ç—É –Ω–µ –∫—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –æ–Ω–∞ –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ –≤–∞–º\n"
        f"üìä –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {remaining_slots}/{user_slots}",
        parse_mode='Markdown'
    )

async def show_my_sales(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å —Ä—ã–Ω–∫–∞
    cleanup_expired_market_cards()
    
    market_cards = get_market_cards()
    user_cards_on_sale = [card for card in market_cards if card['seller_id'] == user_id]

    user_slots = get_user_slots(user_id)
    
    if not user_cards_on_sale:
        await update.message.reply_text(
            f"üì¶ –í–∞—à–∏ –ø—Ä–æ–¥–∞–∂–∏\n\n"
            f"üõí –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sell [—Ü–µ–Ω–∞] [–∫–∞—Ä—Ç–∞] —á—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: {user_slots}\n"
            f"‚≠ê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buyslot —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç –∑–∞ 10 Telegram Stars"
        )
        return

    sales_text = f"üì¶ –í–ê–®–ò –ü–†–û–î–ê–ñ–ò ({len(user_cards_on_sale)}/{user_slots})\n\n"

    for i, card_data in enumerate(user_cards_on_sale, 1):
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ä—ã–Ω–∫–µ
        time_on_market = time.time() - card_data['timestamp']
        hours_left = max(0, 24 - (time_on_market / 3600))
        
        if hours_left > 1:
            time_left_text = f"{int(hours_left)}—á {int((hours_left % 1) * 60)}–º–∏–Ω"
        elif hours_left > 0:
            time_left_text = f"{int(hours_left * 60)}–º–∏–Ω"
        else:
            time_left_text = "—Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç"

        sales_text += f"{i}. {card_data['card']}\n"
        sales_text += f"   üí∞ –¶–µ–Ω–∞: {card_data['price']} –º–æ–Ω–µ—Ç\n"
        sales_text += f"   ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {time_left_text}\n\n"

    user_slots = get_user_slots(user_id)
    free_slots = user_slots - len(user_cards_on_sale)
    sales_text += f"üìä –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {free_slots}/{user_slots}\n\n"
    sales_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsell [–Ω–æ–º–µ—Ä] —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –∫–∞—Ä—Ç—É —Å –ø—Ä–æ–¥–∞–∂–∏\n"
    sales_text += "‚≠ê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buyslot —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç –∑–∞ 10 Telegram Stars"

    await update.message.reply_text(sales_text)

async def buy_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫–∞—Ä—Ç –∑–∞ Telegram Stars"""
    user_id = update.effective_user.id
    current_slots = get_user_slots(user_id)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤
    if current_slots >= 4:
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ (4)!\n"
            f"üìä –£ –≤–∞—Å —É–∂–µ {current_slots} —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫–∞—Ä—Ç."
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
    title = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"
    description = "–ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫–∞—Ä—Ç –Ω–∞ —Ä—ã–Ω–∫–µ"
    payload = f"slot_{user_id}_{int(time.time())}"
    currency = "XTR"  # Telegram Stars
    price = 10  # 10 –∑–≤–µ–∑–¥
    
    prices = [LabeledPrice(label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç", amount=price)]
    
    await context.bot.send_invoice(
        chat_id=update.effective_chat.id,
        title=title,
        description=description,
        payload=payload,
        provider_token="",  # –ü—É—Å—Ç–æ–π –¥–ª—è Telegram Stars
        currency=currency,
        prices=prices,
        start_parameter="slot_purchase"
    )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    query = update.pre_checkout_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
    if query.invoice_payload.startswith("slot_"):
        await query.answer(ok=True)
    else:
        await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä!")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    payment = update.message.successful_payment
    
    if payment.invoice_payload.startswith("slot_"):
        user_id = update.effective_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        add_user_slot(user_id)
        new_slots = get_user_slots(user_id)
        
        await update.message.reply_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
            f"üéâ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫–∞—Ä—Ç!\n"
            f"üìä –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {new_slots} —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sell —á—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"
        )

async def unsell_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(
            "üîÑ –°–Ω—è—Ç–∏–µ –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–¥–∞–∂–∏\n\n"
            "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/unsell [–Ω–æ–º–µ—Ä]\n\n"
            "üí° –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç: /mysales"
        )
        return

    card_number = int(context.args[0])
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å —Ä—ã–Ω–∫–∞
    cleanup_expired_market_cards()
    
    market_cards = get_market_cards()
    user_cards_on_sale = [(i, card) for i, card in enumerate(market_cards) if card['seller_id'] == user_id]

    if not user_cards_on_sale:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ!")
        return

    if card_number < 1 or card_number > len(user_cards_on_sale):
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: 1-{len(user_cards_on_sale)}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ —Ä—ã–Ω–∫–∞ –∏ —Å–∞–º—É –∫–∞—Ä—Ç—É
    market_index, card_data = user_cards_on_sale[card_number - 1]

    # –°–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç—É —Å —Ä—ã–Ω–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    removed_card = remove_card_from_market(market_index)
    if removed_card:
        add_card_to_inventory(user_id, removed_card['card'])
        
        user_slots = get_user_slots(user_id)
        await update.message.reply_text(
            f"‚úÖ –ö–∞—Ä—Ç–∞ —Å–Ω—è—Ç–∞ —Å –ø—Ä–æ–¥–∞–∂–∏!\n\n"
            f"üÉè {removed_card['card']} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
            f"üìä –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_slots - len(user_cards_on_sale) + 1}/{user_slots} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–¥–∞–∂–∏!")

keep_alive()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8216384677:AAHXkJVK0IH5P9xMuiptFTRBgZTGPOYAKMc")

application = ApplicationBuilder().token(TOKEN).build()

# –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
application.add_handler(CommandHandler("card", get_card))
application.add_handler(CommandHandler("profile", show_profile))
application.add_handler(CommandHandler("luckycard", lucky_card))
application.add_handler(CommandHandler("top", show_top))
application.add_handler(CommandHandler("cardlist", show_cardlist))

# –ü–æ–∫–µ—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
application.add_handler(CommandHandler("poker", poker_challenge))
application.add_handler(CommandHandler("accept", accept_poker))
application.add_handler(CommandHandler("decline", decline_poker))
application.add_handler(CommandHandler("pokertop", poker_leaderboard))

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç @PigeonGoonMaster
application.add_handler(CommandHandler("givesponsor", give_sponsor_mango))
application.add_handler(CommandHandler("giveomni", give_omni_mango))
application.add_handler(CommandHandler("givetroll", give_troll_mango))
application.add_handler(CommandHandler("givematvey", give_matvey_mustard))
application.add_handler(CommandHandler("givekendrick", give_kendrick_lamar))
application.add_handler(CommandHandler("giveanycard", give_any_card))
application.add_handler(CommandHandler("givemoney", give_money))

# –ö–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–π–¥–æ–≤
application.add_handler(CommandHandler("trade", trade_offer))
application.add_handler(CommandHandler("accepttrade", accept_trade))
application.add_handler(CommandHandler("declinetrade", decline_trade))
application.add_handler(CommandHandler("canceltrade", cancel_trade))

# –ö–æ–º–∞–Ω–¥—ã –≤–∞–ª—é—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
application.add_handler(CommandHandler("mine", mine_coins))
application.add_handler(CommandHandler("shop", show_shop))
application.add_handler(CommandHandler("buy", buy_item))
application.add_handler(CommandHandler("sell", sell_card))
application.add_handler(CommandHandler("mysales", show_my_sales))
application.add_handler(CommandHandler("unsell", unsell_card))
application.add_handler(CommandHandler("buyslot", buy_slot))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
application.run_polling()
