
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters
import os
import time
from datetime import datetime, timedelta
import asyncio
import json

# –ü—Ä–æ—Å—Ç–∞—è —Ñ–∞–π–ª–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –∑–∞–º–µ–Ω–∞ replit db
class SimpleDB:
    def __init__(self, filename='bot_data.json'):
        self.filename = filename
        self.data = self._load_data()

    def _load_data(self):
        try:
            with open(self.filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def _save_data(self):
        with open(self.filename, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)

    def __contains__(self, key):
        return key in self.data

    def __getitem__(self, key):
        return self.data[key]

    def __setitem__(self, key, value):
        self.data[key] = value
        self._save_data()

db = SimpleDB()

cards = [
    ("üü¢ –û–±—ã—á–Ω–∞—è: –ü—Ä–æ—Å—Ç–æ–π –ú–∞–Ω–≥–æ", 12),
    ("üü¢ –û–±—ã—á–Ω–∞—è: –î–µ–Ω—á–∏–∫", 12),
    ("üü¢ –û–±—ã—á–Ω–∞—è: –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –ì–æ—Ä—á–∏—Ü–∞", 12),
    ("üü¢ –û–±—ã—á–Ω–∞—è: Kanye West", 12),
    ("üîµ –ù–µ–æ–±—ã—á–Ω–∞—è: –ì–æ—Ä—á–∏—Ü–∞", 6),
    ("üîµ –ù–µ–æ–±—ã—á–Ω–∞—è: –¢—Ä–æ–ª–ª—Ñ–µ–π—Å", 6),
    ("üîµ –ù–µ–æ–±—ã—á–Ω–∞—è: –¢–∞–Ω—Ç—É–º –í–µ—Ä–¥–µ", 6),
    ("üîµ –ù–µ–æ–±—ã—á–Ω–∞—è: Sigeon Pex", 6),
    ("üü£ –≠–ø–∏—á–µ—Å–∫–∞—è: –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –ü—Å–∏—Ö–æ–ø–∞—Ç", 3.5),
    ("üü£ –≠–ø–∏—á–µ—Å–∫–∞—è: –ú–∏—Å—Ç–µ—Ä –ì—É–Ω", 3.5),
    ("üü£ –≠–ø–∏—á–µ—Å–∫–∞—è: –î–æ–∫—Ç–æ—Ä –ì—É–Ω", 3.5),
    ("üü£ –≠–ø–∏—á–µ—Å–∫–∞—è: –û—Ç–∫—Ä–æ–π –ë–∞–∑—É –∏ –í–µ—Ä–Ω–∏ –ú–Ω–µ –ë–† –ë–† –ü–∞—Ç–∞–ø–∏–º–∞", 3.5),
    ("üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è: –ú–∞–Ω–≥–æ –ú–∞—Ä–∫", 2),
    ("üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è: –ö–æ—Ä–æ–ª—å –ì–æ—Ä—á–∏—Ü—ã", 2),
    ("üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è: –ö–∏—Ç–∞–π—Å–∫–∏–π –í–æ–∂–¥—å", 2),
    ("üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è: J_–ú–∞–Ω–≥–æ", 2),
    ("üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –ú–∞–Ω–≥–æ –°–ø–æ–Ω—Å–æ—Ä", 0.25),
    ("üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –û–º–Ω–∏-–ú–∞–Ω–≥–æ", 0.25),
    ("üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –ú–∞–Ω–≥–æ –¢—Ä–æ–ª–ª—Ñ–µ–π—Å", 0.25),
    ("üî¥ –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è: –ì–æ—Ä—á–∏—Ü–∞ –ú–∞—Ç–≤–µ—è", 0.25),
    ("‚ö´ –°–µ–∫—Ä–µ—Ç–Ω–∞—è: Kendrick Lamar", 0.25),
]

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∫–µ—Ä–∞
POKER_CARD = "‚≠ê –£–Ω–∏–∫–∞–ª—å–Ω–∞—è: –ú–∞—Å—Ç–µ—Ä –ü–æ–∫–µ—Ä–∞"
POKER_67_CARD = "‚≠ê –£–Ω–∏–∫–∞–ª—å–Ω–∞—è: 67"

# –†–µ–π—Ç–∏–Ω–≥–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤ –≤ –ø–æ–∫–µ—Ä–µ
rarity_scores = {
    "üü¢": 1,  # –û–±—ã—á–Ω–∞—è
    "üîµ": 2,  # –ù–µ–æ–±—ã—á–Ω–∞—è
    "üü£": 3,  # –≠–ø–∏—á–µ—Å–∫–∞—è
    "üü†": 4,  # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è
    "üî¥": 5,  # –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è
    "‚ö´": 10,  # –°–µ–∫—Ä–µ—Ç–Ω–∞—è
    "‚≠ê": 6,  # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è (–ø–æ–∫–µ—Ä–Ω–∞—è)
}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
active_games = {}
pending_challenges = {}
pending_trades = {}

def roll_card():
    roll = random.uniform(0, 100)
    total = 0
    for card, chance in cards:
        total += chance
        if roll <= total:
            return card
    return cards[0][0]

def roll_lucky_card():
    # –¢–æ–ª—å–∫–æ —ç–ø–∏—á–µ—Å–∫–∏–µ, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ, –º–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    lucky_cards = [card for card, chance in cards if chance <= 3.5]
    weights = [chance for card, chance in cards if chance <= 3.5]
    return random.choices(lucky_cards, weights=weights, k=1)[0]

def get_user_cards(user_id):
    user_key = f"user_{user_id}"
    return db[user_key] if user_key in db else {}

def add_card_to_user(user_id, card):
    user_key = f"user_{user_id}"
    user_cards = get_user_cards(user_id)
    user_cards[card] = user_cards.get(card, 0) + 1
    db[user_key] = user_cards

def get_user_coins(user_id):
    coins_key = f"coins_{user_id}"
    return db[coins_key] if coins_key in db else 100

def set_user_coins(user_id, coins):
    coins_key = f"coins_{user_id}"
    db[coins_key] = coins

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_cards = get_user_cards(user_id)
    coins = get_user_coins(user_id)
    
    if not user_cards:
        # –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ - –¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã
        for _ in range(3):
            card = roll_card()
            add_card_to_user(user_id, card)
    
    keyboard = [
        [InlineKeyboardButton("üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", callback_data="open_card")],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∫–∞—Ä—Ç—ã", callback_data="my_cards")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üÉè Mustard Poker", callback_data="poker_menu")],
        [InlineKeyboardButton("üîÑ –¢—Ä–µ–π–¥", callback_data="trade_menu")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üÉè –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mustard Card Bot!\n\n"
        "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É–π –∫–∞—Ä—Ç—ã, —É—á–∞—Å—Ç–≤—É–π –≤ –ø–æ–∫–µ—Ä–µ –∏ —Ç–æ—Ä–≥—É–π —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "open_card":
        coins = get_user_coins(user_id)
        if coins >= 10:
            card = roll_card()
            add_card_to_user(user_id, card)
            set_user_coins(user_id, coins - 10)
            
            await query.edit_message_text(
                f"üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É: {card}\n"
                f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {coins - 10}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]])
            )
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ 10 –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]])
            )
    
    elif query.data == "my_cards":
        user_cards = get_user_cards(user_id)
        if user_cards:
            cards_text = "üì¶ –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã:\n\n"
            for card, count in sorted(user_cards.items()):
                cards_text += f"{card} x{count}\n"
        else:
            cards_text = "üì¶ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç!"
        
        await query.edit_message_text(
            cards_text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )
    
    elif query.data == "balance":
        coins = get_user_coins(user_id)
        await query.edit_message_text(
            f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {coins} –º–æ–Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )
    
    elif query.data == "back_to_menu":
        keyboard = [
            [InlineKeyboardButton("üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", callback_data="open_card")],
            [InlineKeyboardButton("üì¶ –ú–æ–∏ –∫–∞—Ä—Ç—ã", callback_data="my_cards")],
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
            [InlineKeyboardButton("üÉè Mustard Poker", callback_data="poker_menu")],
            [InlineKeyboardButton("üîÑ –¢—Ä–µ–π–¥", callback_data="trade_menu")],
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üÉè Mustard Card Bot\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot_token = os.getenv('8216384677:AAFLKENl0wiM87HMJxomy4aoLUUOcgYljR0')
    
    if not bot_token:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ Mustard Card Bot...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(bot_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
